syntax = "proto3";

enum RunStatus {
  PENDING = 0;
  RUNNING = 1;
  FAILED = 2;
  COMPLETED = 3;
  TERMINATED = 4;
}

message Obj_Project {
  string id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  bool is_deleted = 4;
  string image_name = 5;
  string name = 6;
}

message Obj_Workflow {
  string id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  bool is_deleted = 4;
  string name = 5;
  string project_ref_id = 6;
}

message Obj_WorkflowRun {
  string id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  bool is_deleted = 4;
  string active_task_refs = 5;
  string project_ref_id = 6;
  RunStatus run_status = 7;
}

message Obj_WorkflowRunMessage {
  string id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  bool is_deleted = 4;
  string payload = 5;
  string workflow_run_ref_id = 6;
}

message Obj_Task {
  string id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  bool is_deleted = 4;
  string name = 5;
  string version = 7;
  string workflow_ref_id = 6;
}

message Req_GetWorkflowRunMessagesForWorkflowRun {
  string task_run_ref_id = 1;
  bool watch = 2;
}

message Req_RegisterProject {
  string image_name = 1;
  string name = 2;
}

message Req_RegisterWorkflows {
  string names = 1;
  string project_ref_id = 2;
}

message Req_RegisterTask {
  string name = 1;
  string workflow_ref_id = 2;
  string version = 3;
}

message Req_RunWorkflow {
  string workflow_ref_id = 1;
}

service ML {
  // rpc GetProjects(Req_GetProjects) returns (stream Obj_Project);
  // rpc GetWorkflowsForProject(Req_GetWorkflowsForProject) returns (stream Obj_Workflow);
  // rpc GetTasksForWorkflow(Req_GetTasksForProject) returns (stream Obj_Task);
  // rpc GetTaskRunsForTask(Req_GetTaskInstancesForTask) returns (stream Obj_TaskInstance);
  rpc GetWorkflowRunMessagesForWorkflowRun(Req_GetWorkflowRunMessagesForWorkflowRun) returns (stream Obj_WorkflowRunMessage);

  rpc RegisterProject(Req_RegisterProject) returns (Obj_Project);
  rpc RegisterWorkflows(Req_RegisterWorkflows) returns (stream Obj_Workflow);
  rpc RegisterTask(Req_RegisterTask) returns (Obj_Task);

  rpc RunWorkflow(Req_RunWorkflow) returns (stream Obj_WorkflowRunMessage);
}